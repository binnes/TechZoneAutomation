{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TechZone Automation \u00b6 This repo is to document exploration of TechZone Automation / Cloud Native Toolkit.","title":"Home"},{"location":"#techzone-automation","text":"This repo is to document exploration of TechZone Automation / Cloud Native Toolkit.","title":"TechZone Automation"},{"location":"bom/","text":"Bill of Materials \u00b6 To deploy infrastructure or software using TechZone Automation you need to start by creating a Bill of Materials (BOM). The BOM defines the modules you want to install. Available modules can be found in the Module Catalog Investigations to do \u00b6 dependencies (including default vs specified), aliases and dependency resolution ( iascable build ) variables, input and output how to discover what a module does Dependencies \u00b6 When you want to install a module there maybe some dependencies that module needs to allow it to be installed. For example, if you want to use GitOps (ArgoCD) to install an application then GitOps needs to be available and configured on the target cluster. Similarly if I want to install and configure GitOps then I need to have a cluster to install GitOps into. Every module in TechZone automation defines it's dependencies in a module.yaml file in the module's github repository. Thr module's repo is linked by clicking on the module name in the modules catalog Alias \u00b6 Sometimes a module dependency can be satisfied by multiple modules. In this case an alias can be used, where a module can register that it satisfies an alias. An example of this is the alias cluster. Any module that makes a Kubernetes cluster available to other modules will define the cluster alias. This then provides a generic way to specify a cluster dependency. So long as a module is included in a BOM that satisfies the cluster alias the dependency will be met. If you explore the cluster category in the modules catalog you will see a number of options for installing a Kubernetes cluster, including an option to simple provide the login to an existing cluster - all these modules will satisfy the cluster dependency. Optional \u00b6 Some dependencies can be specified as optional. This is where a module may be able to complete the installation without the optional dependency being satisfied in the BOM. An example of this is that modules using GitOps to perform an installation will specify the cluster as optional. This is because the module doesn't need to interact with the cluster to complete the installation. The module can simple create content in a GitOps repository to complete the installation on a cluster. Todo In the module.yaml what are the refs and interface properties used for? How does the platform property work - any implications/restrictions or is this a testing statement? How are dependencies resolved? if a single module satisfies a dependency is it automatically selected? can a default module be specified if there are multiple modules that satisfy a dependency and one is not included in a BOM?","title":"Bill of Materials"},{"location":"bom/#bill-of-materials","text":"To deploy infrastructure or software using TechZone Automation you need to start by creating a Bill of Materials (BOM). The BOM defines the modules you want to install. Available modules can be found in the Module Catalog","title":"Bill of Materials"},{"location":"bom/#investigations-to-do","text":"dependencies (including default vs specified), aliases and dependency resolution ( iascable build ) variables, input and output how to discover what a module does","title":"Investigations to do"},{"location":"bom/#dependencies","text":"When you want to install a module there maybe some dependencies that module needs to allow it to be installed. For example, if you want to use GitOps (ArgoCD) to install an application then GitOps needs to be available and configured on the target cluster. Similarly if I want to install and configure GitOps then I need to have a cluster to install GitOps into. Every module in TechZone automation defines it's dependencies in a module.yaml file in the module's github repository. Thr module's repo is linked by clicking on the module name in the modules catalog","title":"Dependencies"},{"location":"bom/#alias","text":"Sometimes a module dependency can be satisfied by multiple modules. In this case an alias can be used, where a module can register that it satisfies an alias. An example of this is the alias cluster. Any module that makes a Kubernetes cluster available to other modules will define the cluster alias. This then provides a generic way to specify a cluster dependency. So long as a module is included in a BOM that satisfies the cluster alias the dependency will be met. If you explore the cluster category in the modules catalog you will see a number of options for installing a Kubernetes cluster, including an option to simple provide the login to an existing cluster - all these modules will satisfy the cluster dependency.","title":"Alias"},{"location":"bom/#optional","text":"Some dependencies can be specified as optional. This is where a module may be able to complete the installation without the optional dependency being satisfied in the BOM. An example of this is that modules using GitOps to perform an installation will specify the cluster as optional. This is because the module doesn't need to interact with the cluster to complete the installation. The module can simple create content in a GitOps repository to complete the installation on a cluster. Todo In the module.yaml what are the refs and interface properties used for? How does the platform property work - any implications/restrictions or is this a testing statement? How are dependencies resolved? if a single module satisfies a dependency is it automatically selected? can a default module be specified if there are multiple modules that satisfy a dependency and one is not included in a BOM?","title":"Optional"},{"location":"deploy/","text":"Deploy Bill of Materials \u00b6 Todo Complete this page","title":"Deploy"},{"location":"deploy/#deploy-bill-of-materials","text":"Todo Complete this page","title":"Deploy Bill of Materials"},{"location":"plan/","text":"Planning \u00b6 The following investigation needs to be done and written up in preparation for creating user documentation. The work will be split into 2 sections: Consumption - how to use TechZone Automation to create an OpenShift Cluster on different clouds then install and configure a defined set of software Contribute - how to contribute modules to TechZone Automation to extend the catalog of modules available to install. This may include open source software, other commercial software offerings Consumption \u00b6 Before someone can contribute a module they need to understand how TechZone Automation works and how to use it to lay down a cluster and set of software. The investigations in this section should: Setup \u00b6 cover system setup to be able to use TechZone Automation on: MacOS (Intel) MacOS (Apple Silicon) Windows (10 and 11) Linux (Fedora) Linux (Ubuntu) In addition to the OS options there should be clear instructions to cover the following container tooling options: Docker Podman (if this is going to be a supported option going forward?) Multipass Building BOM \u00b6 There is an extensive catalog of modules so some explanation is needed to cover the tooling available and also explain how modules work to build an entire system (dependencies, variables, etc....) Installing an environment using a BOM \u00b6 How to take a BOM and run it to create an environment (this should work with all allowed OS and container tool combinations) Contribution \u00b6 Todo Complete this part of the plan","title":"Plan"},{"location":"plan/#planning","text":"The following investigation needs to be done and written up in preparation for creating user documentation. The work will be split into 2 sections: Consumption - how to use TechZone Automation to create an OpenShift Cluster on different clouds then install and configure a defined set of software Contribute - how to contribute modules to TechZone Automation to extend the catalog of modules available to install. This may include open source software, other commercial software offerings","title":"Planning"},{"location":"plan/#consumption","text":"Before someone can contribute a module they need to understand how TechZone Automation works and how to use it to lay down a cluster and set of software. The investigations in this section should:","title":"Consumption"},{"location":"plan/#setup","text":"cover system setup to be able to use TechZone Automation on: MacOS (Intel) MacOS (Apple Silicon) Windows (10 and 11) Linux (Fedora) Linux (Ubuntu) In addition to the OS options there should be clear instructions to cover the following container tooling options: Docker Podman (if this is going to be a supported option going forward?) Multipass","title":"Setup"},{"location":"plan/#building-bom","text":"There is an extensive catalog of modules so some explanation is needed to cover the tooling available and also explain how modules work to build an entire system (dependencies, variables, etc....)","title":"Building BOM"},{"location":"plan/#installing-an-environment-using-a-bom","text":"How to take a BOM and run it to create an environment (this should work with all allowed OS and container tool combinations)","title":"Installing an environment using a BOM"},{"location":"plan/#contribution","text":"Todo Complete this part of the plan","title":"Contribution"},{"location":"reference/","text":"Reference material \u00b6 Supported runtime tools for iascable Thomas's blog entry Cloud-Native Expertise Roadmap Modules catalog Ascent tool Operate - Cloud Native Toolkit","title":"Reference"},{"location":"reference/#reference-material","text":"Supported runtime tools for iascable Thomas's blog entry Cloud-Native Expertise Roadmap Modules catalog Ascent tool Operate - Cloud Native Toolkit","title":"Reference material"},{"location":"setup/","text":"Setup \u00b6 Todo This section is under construction - need to split into sections covering install, creating BOM and then deploying BOM instead of single set of steps Setup and first deploy (multipass) \u00b6 Multipass networking doesn't work (no external connectivity, though name resolution works) with Cisco AnyConnect running! Turning off Cisco AnyConnect and the networking works - you cannot start Cisco AnyConnect while multipass is running or the network will be killed. Create or change into the directory containing your BOM then run the following commands: install multipass : brew install --cask multipass download the cloud init file : curl https://raw.githubusercontent.com/cloud-native-toolkit/sre-utilities/main/cloud-init/cli-tools.yaml --output cli-tools.yaml launch multipass vm : multipass launch --name cli-tools --cloud-init ./cli-tools.yaml mount current directory into VM : multipass mount $PWD cli-tools:/automation enter vm : multipass shell cli-tools install iascable : curl -sL https://raw.githubusercontent.com/cloud-native-toolkit/iascable/main/install.sh | sudo bash - this is different to the command given in the docs (pipe into bash not sh) create BOM e.g. my-ibm-vpc-gitops.yaml apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : my-ibm-vpc-gitops spec : modules : - name : ibm-vpc - name : ibm-vpc-subnets - name : ibm-vpc-gateways - name : ibm-ocp-vpc variables : - name : worker_count value : 1 - name : gitops-repo - name : argocd-bootstrap run iascable build: iascable build -i oc-dev.yaml run the terraform apply (optionally a variables.yaml file can be created - if not you will be prompted for required values) : cd output/my-ibm-vpc-gitops ./apply.sh answer any prompts for missing variable values, check the steps listed and confirm the actions by responding yes wait for terraform and gitops to complete the install Issues: guidance on variable values to be provided is needed certain modules fail (sealed-secrets-controller image fails to pull from docker.io - timeout) Setup and first deploy (podman) \u00b6 Create or change into the directory containing your BOM then run the following commands: install podman : brew install podman install iascable if not already installed : curl -sL https://raw.githubusercontent.com/cloud-native-toolkit/iascable/main/install.sh | sudo sh initialise podman : podman machine init enable podman root : podman machine set --rootful start podman machine : podman machine start create BOM e.g. my-ibm-vpc-gitops.yaml apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : my-ibm-vpc-gitops spec : modules : - name : ibm-vpc - name : ibm-vpc-subnets - name : ibm-vpc-gateways - name : ibm-ocp-vpc variables : - name : worker_count value : 1 - name : gitops-repo - name : argocd-bootstrap run iascable build: iascable build -i my-ibm-vpc-gitops.yaml launch the tools container : cd output ./launch.sh podman --pull copy the mounted directory to a container directory (needed as podman has issues with symbolic links on a mounted directory) : cp -R * /workspaces run the terraform apply (optionally a variables.yaml file can be created - if not you will be prompted for required values) : cd /workspaces/my-ibm-vpc-gitops ./apply.sh answer any prompts for missing variable values, check the steps listed and confirm the actions by responding yes wait for terraform and gitops to complete the install Note the launch script will attach a podman volume for the workspace filesystem, which persists across multiple container runs, so you may need to clear the workspaces directory if you don't need the content from previous runs.","title":"Setup"},{"location":"setup/#setup","text":"Todo This section is under construction - need to split into sections covering install, creating BOM and then deploying BOM instead of single set of steps","title":"Setup"},{"location":"setup/#setup-and-first-deploy-multipass","text":"Multipass networking doesn't work (no external connectivity, though name resolution works) with Cisco AnyConnect running! Turning off Cisco AnyConnect and the networking works - you cannot start Cisco AnyConnect while multipass is running or the network will be killed. Create or change into the directory containing your BOM then run the following commands: install multipass : brew install --cask multipass download the cloud init file : curl https://raw.githubusercontent.com/cloud-native-toolkit/sre-utilities/main/cloud-init/cli-tools.yaml --output cli-tools.yaml launch multipass vm : multipass launch --name cli-tools --cloud-init ./cli-tools.yaml mount current directory into VM : multipass mount $PWD cli-tools:/automation enter vm : multipass shell cli-tools install iascable : curl -sL https://raw.githubusercontent.com/cloud-native-toolkit/iascable/main/install.sh | sudo bash - this is different to the command given in the docs (pipe into bash not sh) create BOM e.g. my-ibm-vpc-gitops.yaml apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : my-ibm-vpc-gitops spec : modules : - name : ibm-vpc - name : ibm-vpc-subnets - name : ibm-vpc-gateways - name : ibm-ocp-vpc variables : - name : worker_count value : 1 - name : gitops-repo - name : argocd-bootstrap run iascable build: iascable build -i oc-dev.yaml run the terraform apply (optionally a variables.yaml file can be created - if not you will be prompted for required values) : cd output/my-ibm-vpc-gitops ./apply.sh answer any prompts for missing variable values, check the steps listed and confirm the actions by responding yes wait for terraform and gitops to complete the install Issues: guidance on variable values to be provided is needed certain modules fail (sealed-secrets-controller image fails to pull from docker.io - timeout)","title":"Setup and first deploy (multipass)"},{"location":"setup/#setup-and-first-deploy-podman","text":"Create or change into the directory containing your BOM then run the following commands: install podman : brew install podman install iascable if not already installed : curl -sL https://raw.githubusercontent.com/cloud-native-toolkit/iascable/main/install.sh | sudo sh initialise podman : podman machine init enable podman root : podman machine set --rootful start podman machine : podman machine start create BOM e.g. my-ibm-vpc-gitops.yaml apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : my-ibm-vpc-gitops spec : modules : - name : ibm-vpc - name : ibm-vpc-subnets - name : ibm-vpc-gateways - name : ibm-ocp-vpc variables : - name : worker_count value : 1 - name : gitops-repo - name : argocd-bootstrap run iascable build: iascable build -i my-ibm-vpc-gitops.yaml launch the tools container : cd output ./launch.sh podman --pull copy the mounted directory to a container directory (needed as podman has issues with symbolic links on a mounted directory) : cp -R * /workspaces run the terraform apply (optionally a variables.yaml file can be created - if not you will be prompted for required values) : cd /workspaces/my-ibm-vpc-gitops ./apply.sh answer any prompts for missing variable values, check the steps listed and confirm the actions by responding yes wait for terraform and gitops to complete the install Note the launch script will attach a podman volume for the workspace filesystem, which persists across multiple container runs, so you may need to clear the workspaces directory if you don't need the content from previous runs.","title":"Setup and first deploy (podman)"}]}